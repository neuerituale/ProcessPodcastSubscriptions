<?php
/**
* COPYRIGHT NOTICE
* Copyright (c) 2021 Neue Rituale GbR
* @author NR <code@neuerituale.com>
*/

namespace ProcessWire;

use Lukaswhite\PodcastFeedParser\Parser;
use Lukaswhite\PodcastFeedParser\Podcast;

class ProcessPodcastSubscriptions extends Process implements Module, ConfigurableModule
{

	/**
	 * @return array
	 *
	 *
	 * Save rss feed in db
	 * Field: feed url, last update, created,
	 *
	 *
	 *
	 */

	const dbTableName = 'podcast_subscriptions';
	const logFileName = 'podcast-subscriptions';
	private ?WireArray $feedsCache = null;

	public static function getModuleinfo() {
		return array(
			'title' => 'Process Podcast Subscriptions',
			'version' => 101,
			'summary' => 'Subscribe Podcast RSS feed and save as new page',
			'icon' => 'clock-o',
			'requires' => ['LazyCron'],
			'permission' => 'podcast-subscriptions',
			'singular' => true,
			'autoload' => true,
			'page' => [
				'name' => 'podcast-subscriptions',
				'parent' => 'admin',
				'title' => __('Podcasts'),
			],
		);
	}

	public function init() {

		// find hookname and init lazy cron hook
		$hookName = @$this->timeFuncs[$this->cronSchedule];
		if($hookName && $this->modules->isInstalled('LazyCron')) $this->addHook('LazyCron::' . $hookName, $this, 'updateAllFeeds');
	}

	public function ready() {

		// add css in Backend
		if($this->page->template->name === 'admin')	$this->config->styles->add($this->config->urls->ProcessPodcastSubscriptions . "ProcessPodcastSubscriptions.css");

	}

	/** VIEWS */

	/**
	 * Show table
	 * @return array|bool|string|null
	 * @throws WirePermissionException
	 */
	public function ___execute() {

		// Add new feed
		if($this->session->CSRF->hasValidToken()) {
			$feedUrl = $this->input->post('feed_url', 'url');
			try {
				$this->addFeed($feedUrl);
			} catch(\Exception $exception) {
				$this->error($exception->getMessage());
			}
		}

		return [
			'feeds' => $this->getFeeds()
		];

	}

	/**
	 * Manual update
	 * @return void
	 * @throws WireException
	 * @throws \Lukaswhite\PodcastFeedParser\Exceptions\FileNotFoundException
	 * @throws \Lukaswhite\PodcastFeedParser\Exceptions\InvalidXmlException
	 */
	public function ___executeUpdate() {
		$id = $this->sanitizer->int($this->input->urlSegment2);
		$feed = $this->updateFeed($id);
		$this->message(sprintf(__('Podcast "%s" updated'), $feed->title));
		$this->session->redirect($this->page->url);
	}

	/**
	 * Delete Feed
	 * @return void
	 * @throws WireException
	 */
	public function ___executeDelete() {
		$id = $this->sanitizer->int($this->input->urlSegment2);
		if($this->deleteFeed($id)) $this->message(__('Podcast deleted'));
		$this->session->redirect($this->page->url);
	}

	/** CONTROL */

	/**
	 * @param string $feedUrl
	 * @return Podcast
	 * @throws WireException
	 * @throws \Lukaswhite\PodcastFeedParser\Exceptions\FileNotFoundException
	 * @throws \Lukaswhite\PodcastFeedParser\Exceptions\InvalidXmlException
	 */
	public function addFeed(string $feedUrl = '') : Podcast {

		// check url
		if(empty($feedUrl)) throw new \Exception($this->_('Empty feed url'));

		// duplication check
		$checkStatement = $this->database->prepare('SELECT * FROM ' . self::dbTableName . ' WHERE feed_url=:feedUrl');
		$checkStatement->execute(['feedUrl' => $feedUrl]);
		if($checkStatement->fetchColumn(0)) throw new \Exception($this->_('Feed already exists'));

		// check feed
		$podcast = $this->fetchAndParseFeed($feedUrl);
		if(!$podcast) throw new \Exception($this->_('Invalid feed, no type found.'));

		// add to db
		$addStatement = $this->database->prepare('INSERT INTO ' . self::dbTableName . ' (title,description,artwork_url,feed_url,media_count) VALUE (:title,:description,:artwork_url,:feed_url,:media_count)');
		$dbFeedInput = $this->filterDbFeedInput($feedUrl, $podcast);
		$addStatement->execute($dbFeedInput);
		$this->message(sprintf($this->_('Podcast "%s" added'), $dbFeedInput['title']));

		// processPodcast
		$feed = $this->getFeeds('feed_url=' . $feedUrl)->first();
		if($feed) $this->processPodcast($feed, $podcast);

		return $podcast;

	}

	/**
	 * @param int $id
	 * @param bool $flushFeedCache
	 * @return bool|mixed|Wire
	 * @throws WireException
	 * @throws \Lukaswhite\PodcastFeedParser\Exceptions\FileNotFoundException
	 * @throws \Lukaswhite\PodcastFeedParser\Exceptions\InvalidXmlException
	 */
	public function updateFeed(int $id, $flushFeedCache = true) {

		// find feed
		$feed = $this->getFeeds('id=' . $id)->first();
		if(!$feed) throw new \Exception($this->_('Invalid feed id'));
		$podcast = $this->fetchAndParseFeed($feed->feed_url);

		// Update feed in db and the wireData for return
		$updateStatement = $this->database->prepare('UPDATE '.self::dbTableName.' SET title=:title, description=:description, artwork_url=:artwork_url, media_count=:media_count, modified=:modified WHERE id=:id;');
		$dbFeedUpdate = $this->filterDbFeedUpdate($id, $podcast);

		$updateStatement->execute($dbFeedUpdate);
		$feed->setArray($dbFeedUpdate);

		// flush feedcache
		if($flushFeedCache) $this->feedsCache = null;

		// process podcast
		$this->processPodcast($feed, $podcast);

		return $feed;
	}

	/**
	 * Update all feeds
	 * @return $this
	 * @throws WireException
	 * @throws \Lukaswhite\PodcastFeedParser\Exceptions\FileNotFoundException
	 * @throws \Lukaswhite\PodcastFeedParser\Exceptions\InvalidXmlException
	 */
	public function updateAllFeeds() : ProcessPodcastSubscriptions {

		$feeds = $this->getFeeds('', true);
		foreach($feeds as $feed)  $this->updateFeed($feed->id, false);
		$this->feedsCache = null;

		return $this;
	}

	/**
	 * @param string $selector
	 * @return WireArray
	 * @throws WireException
	 */
	public function getFeeds(string $selector = '', $fresh = false) {

		$result = $this->feedsCache;

		if($fresh || !($result instanceof WireArray)) {
			$result = new WireArray();

			// Get from database
			$statement = $this->database->prepare('SELECT * FROM ' . self::dbTableName);
			$statement->execute();
			$items = $statement->fetchAll(\PDO::FETCH_CLASS, Feed::class);

			if(!is_array($items)) {
				$this->feedsCache = null;
				return $result;
			};

			$result = WireArray::newInstance($items);
			$this->feedsCache = $result;
		}

		return empty($selector) ? $result : $result->find($selector);
	}

	/**
	 * Delete feed by id
	 * @param int $id
	 * @return bool
	 * @throws WireException
	 */
	public function deleteFeed(int $id) {
		$feed = $this->getFeeds('id=' . $id)->first();
		if(!$feed) throw new \Exception($this->_('Invalid feed id'));

		$statement = $this->database->prepare('DELETE FROM '.self::dbTableName.' WHERE id=:id');
		$statement->bindValue('id', $feed->id, \PDO::PARAM_INT);
		return $statement->execute();
	}

	/**
	 * @param $feedUrl
	 * @return \Lukaswhite\PodcastFeedParser\Podcast
	 * @throws \Lukaswhite\PodcastFeedParser\Exceptions\FileNotFoundException
	 * @throws \Lukaswhite\PodcastFeedParser\Exceptions\InvalidXmlException
	 */
	public function fetchAndParseFeed($feedUrl) {
		$this->loadDependencies();

		$fileContent = $this->files->fileGetContents($feedUrl);
		if(!$fileContent) throw new \Exception($this->_('Invalid feed url'));

		$parser = new Parser();
		$parser->setContent($fileContent);

		/** @var Podcast $podcast */
		$podcast = $parser->run();
		return $podcast->getType() ? $podcast : null;
	}

	/**
	 * @param WireData $feed
	 * @param Podcast $podcast
	 * @return void
	 */
	public function ___processPodcast(WireData $feed, Podcast $podcast) {
		$this->log('processPodcast done', ['name' => self::logFileName]);
	}

	/** HELPER */

	/**
	 * Filter database input
	 * for hooks
	 *
	 * @param string $feedUrl
	 * @param Podcast $podcast
	 * @param int $id
	 * @return array
	 * @throws WireException
	 */
	public function ___filterDbFeedInput(string $feedUrl, Podcast $podcast) : array {
		return [
			'title' => $this->sanitizer->text(htmlspecialchars_decode($podcast->getTitle())),
			'description' => $this->sanitizer->text(htmlspecialchars_decode($podcast->getDescription()), ['maxLength' => 65535]),
			'artwork_url' => $this->sanitizer->url($podcast->getArtwork()->getUri()),
			'feed_url' => $feedUrl,
			'media_count' => $this->sanitizer->int($podcast->getEpisodes()->count())
		];
	}

	/**
	 * Filter database update
	 * for hooks
	 *
	 * @param int $id
	 * @param Podcast $podcast
	 * @return array
	 * @throws WireException
	 */
	public function ___filterDbFeedUpdate(int $id, Podcast $podcast) : array {
		return [
			'title' => $this->sanitizer->text(htmlspecialchars_decode($podcast->getTitle())),
			'description' => $this->sanitizer->text(htmlspecialchars_decode($podcast->getDescription()), ['maxLength' => 65535]),
			'artwork_url' => $this->sanitizer->url($podcast->getArtwork()->getUri()),
			'media_count' => $this->sanitizer->int($podcast->getEpisodes()->count()),
			'modified' => date('Y-m-d H:i:s'),
			'id' =>$id
		];
	}

	/**
	 * @return void
	 * @throws \Exception
	 */
	public function ___loadDependencies () {
		if(!file_exists(__DIR__ . '/vendor/autoload.php')) throw new \Exception('Please install podcast-feed-parser in your the module directory (composer install).');
		require_once(/*NoCompile*/__DIR__ . '/vendor/autoload.php');
	}

	/**
	 * Install
	 * Add field
	 */
	public function install() {

		// Create Database
		$this->wire('database')->exec("
			CREATE TABLE ".self::dbTableName." (
				`id` int(11) NOT NULL,
				`title` tinytext NOT NULL,
				`description` text NOT NULL,
				`artwork_url` text NOT NULL,
				`feed_url` varchar(2000) NOT NULL,
				`media_count` int(11) NOT NULL DEFAULT '0',
				`modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
				`created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
			);
			ALTER TABLE ".self::dbTableName." ADD PRIMARY KEY (`id`);
			ALTER TABLE ".self::dbTableName." MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
		");
	}

	/**
	 * @return void
	 */
	public function uninstall() {
		try {
			$this->wire('database')->exec('DROP TABLE ' . self::dbTableName);
		} catch(\Exception $exception) {
			$this->error($exception->getMessage());
		}
	}
}

class Feed extends WireData {
	public function set($key, $value) {
		if($key === 'id' || $key === 'media_count') $value = (int) $value;
		return parent::set($key, $value);
	}
}